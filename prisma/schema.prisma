// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  feeds         Feed[]
  feedItems     FeedItem[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feed {
  id        String    @id @default(cuid())
  userId    String
  title     String
  siteUrl   String
  feedUrl   String
  checkedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  items FeedItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feedUrl])
  @@index([userId])
}

model FeedItem {
  id          String    @id @default(cuid())
  guid        String
  userId      String
  feedId      String
  title       String
  url         String
  isRead      Boolean   @default(false)
  readAt      DateTime?
  publishedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@index([userId, feedId, publishedAt])
}
